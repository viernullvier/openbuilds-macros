const storageKey = "macro::linear-cut"
const defaults = {
  xMovement: 100,
  yMovement: 0,
  zMovement: 10,
  stepDown: 1,
  direction: 'both',
  feedrate: 100,
}

function loadValues() {
  const payload = localStorage.getItem(storageKey) || "{}"
  try {
    const parsed = JSON.parse(payload)
    return {
      ...defaults,
      ...parsed,
    }
  } catch {
    return defaults
  }
}

function saveValues(values) {
  localStorage.setItem(storageKey, JSON.stringify(values))
}

function generateGCode(xMovement, yMovement, zMovement, stepDown, direction, feedrate) {
  if (zMovement <= 0 || stepDown <= 0)
    return;
  saveValues({
    xMovement,
    yMovement,
    zMovement,
    stepDown,
    direction,
    feedrate,
  })

  var x0 = 0
  var y0 = 0
  var z0 = 0
  var zSafe = 7

  var z = z0
  var xyFeed = feedrate
  var zFeed = feedrate / 2

  var gCode = ''
  gCode += `; GCODE Generated by ???? on ?????\n`
  gCode += `; linear pocket movement from 0/0/0 to ${xMovement}/${yMovement}/${zMovement} in ${stepDown}mm steps\n`
  gCode += 'G21; mm-mode\n'
  gCode += 'G54; Work Coordinates\n'
  gCode += 'G21; mm-mode\n'
  gCode += 'G90; Absolute Positioning\n'
  gCode += 'M3 S1000; Spindle On\n'
  gCode += '\n'
  gCode += '; Begin of linear pocket / cut loop\n'
  gCode += '; Endmill Diameter: any\n'
  gCode += `G0 Z${z0 + zSafe}; move to z-safe height\n`
  gCode += `G0 F1000 X${x0} Y${y0}; move to x/y zeropoint\n`
  gCode += '\n'

  var forwardDir = 1
  while (z >= -zMovement) {
    // step down
    z -= stepDown
    if (z < -zMovement) z = -zMovement
    gCode += `G1 F${zFeed} Z${z}; step down on current position\n`

    // x/y movement
    if (forwardDir) {
      gCode += `G1 F${xyFeed} X${x0 + xMovement} Y${y0 + yMovement}; linear x/y movement\n`
    } else {
      gCode += `G1 F${xyFeed} X${x0} Y${y0}; linear x/y movement\n`
    }

    // check for endCondition
    if (z <= -zMovement)
      break
    if (direction === 'both') {
      forwardDir = !forwardDir
    } else {
      gCode += `G0 Z${z0 + zSafe}; move to z-safe height\n`
      gCode += `G0 X${x0} Y${y0}; return to start position\n`
    }
  }

  // move tool back to save z
  gCode += '\n'
  gCode += '; End of linear pockt / cut loop\n'
  gCode += '; retracting back to z-safe\n'
  gCode += `G0 Z${z0 + zSafe}\n`
  gCode += '\n'
  gCode += 'M5 S0; Spindle Off\n'
  gCode += '; Job completed\n'

  // replace code in G-Code editor
  editor.session.setValue(gCode);

  // refresh 3D view
  parseGcodeInWebWorker(editor.getValue())

  // required for testing
  return gCode;
}

const values = loadValues()
function genInputHtml(label, id, value, icon, descr) {
  var html = ''
  html += '<div class="row mb-0">\n'
  html += `  <label class= "cell-sm-6" > ${label}</label >\n`
  html += '  <div class="cell-sm-6">\n'
  html += `    <input id="${id}" type="number" value="${value}" data-role="input" data-append="mm" data-prepend="<i class='fas ${icon}'></i>" data-clear-button="false">\n`
  html += '  </div>\n'
  html += '</div>\n'
  html += '<hr>\n'
  if (descr)
    html += `<small > ${descr}</small > `
  return html
}

function genSelectHtml(label, id, options, selected, descr = '', opt = '') {
  const descrHtml = descr ? ` <small><i>(${descr})</i></small>` : ""
  var html = ''
  html += '<div class="row mb-1">\n'
  html += `  <label class="cell-sm-8">${label}${descrHtml}</label>\n`
  html += '  <div class="cell-sm-4">\n'
  html += `    <select id="${id}" data-role="select" ${opt}>\n`
  html += options.map(o => `      <option value="${o}"${o == selected ? ' selected="selected"' : ''}>${o}</option>\n`).join('')
  html += '    </select>\n'
  html += '  </div>\n'
  html += '</div>\n'
  return html
}

// Dialog creation
Metro.dialog.create({
  title: 'Linear Pocket / Cut',
  content:
    genInputHtml('X movement', 'xMovement', values.xMovement, 'fa-ruler-horizontal', '') +
    genInputHtml('Y movement', 'yMovement', values.yMovement, 'fa-ruler-vertical', '') +
    genInputHtml('Cutting deepth', 'zMovement', values.zMovement, 'fa-ruler', '') +
    genInputHtml('Step-down', 'stepDown', values.stepDown, 'fa-align-justify', '') +
    genSelectHtml('Cut direction', 'direction', ['single', 'both'], values.direction, '') + 
    genInputHtml('Feedrate', 'feedrate', values.feedrate, 'fa-running', 'How fast to move the endmill in milling operation'),
  actions: [
    {
      caption: "Generate G-Code",
      cls: "js-dialog-close success",
      onclick: function () {
        const xMovement = parseFloat($("#xMovement").val())
        const yMovement = parseFloat($("#yMovement").val())
        const zMovement = parseFloat($("#zMovement").val())
        const stepDown = parseFloat($("#stepDown").val())
        const direction = $("#direction").val()
        const feedrate = parseInt($("#feedrate").val())
        generateGCode(xMovement, yMovement, zMovement, stepDown, direction, feedrate)
      }
    }, {
      caption: "Cancel",
      cls: "js-dialog-close alert",
      onclick: function () {
      }
    }
  ]
});

// required for jest test 
if (process.env.JEST_WORKER_ID !== undefined)
  module.exports = generateGCode;