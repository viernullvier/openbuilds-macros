{
  "title": "Linear Cut",
  "icon": "fas fa-ruler-combined",
  "codetype": "javascript",
  "gcode": "",
  "javascript": "const storageKey = \"macro::linear-cut\"\nconst defaults = {\n  xMovement: 100,\n  yMovement: 0,\n  zMovement: 10,\n  stepDown: 1,\n  direction: 'both',\n  feedrate: 100,\n}\n\nfunction loadValues() {\n  const payload = localStorage.getItem(storageKey) || \"{}\"\n  try {\n    const parsed = JSON.parse(payload)\n    return {\n      ...defaults,\n      ...parsed,\n    }\n  } catch {\n    return defaults\n  }\n}\n\nfunction saveValues(values) {\n  localStorage.setItem(storageKey, JSON.stringify(values))\n}\n\nfunction generateGCode(xMovement, yMovement, zMovement, stepDown, direction, feedrate) {\n  if (zMovement <= 0 || stepDown <= 0)\n    return;\n  saveValues({\n    xMovement,\n    yMovement,\n    zMovement,\n    stepDown,\n    direction,\n    feedrate,\n  })\n\n  var x0 = 0\n  var y0 = 0\n  var z0 = 0\n  var zSafe = 7\n\n  var z = z0\n  var xyFeed = feedrate\n  var zFeed = feedrate / 2\n\n  var gCode = ''\n  gCode += `; GCODE Generated by ???? on ?????\\n`\n  gCode += `; linear pocket movement from 0/0/0 to ${xMovement}/${yMovement}/${zMovement} in ${stepDown}mm steps\\n`\n  gCode += 'G21; mm-mode\\n'\n  gCode += 'G54; Work Coordinates\\n'\n  gCode += 'G21; mm-mode\\n'\n  gCode += 'G90; Absolute Positioning\\n'\n  gCode += 'M3 S1000; Spindle On\\n'\n  gCode += '\\n'\n  gCode += '; Begin of linear pocket / cut loop\\n'\n  gCode += '; Endmill Diameter: any\\n'\n  gCode += `G0 Z${z0 + zSafe}; move to z-safe height\\n`\n  gCode += `G0 F1000 X${x0} Y${y0}; move to x/y zeropoint\\n`\n  gCode += '\\n'\n\n  var forwardDir = 1\n  while (z >= -zMovement) {\n    // step down\n    z -= stepDown\n    if (z < -zMovement) z = -zMovement\n    gCode += `G1 F${zFeed} Z${z}; step down on current position\\n`\n\n    // x/y movement\n    if (forwardDir) {\n      gCode += `G1 F${xyFeed} X${x0 + xMovement} Y${y0 + yMovement}; linear x/y movement\\n`\n    } else {\n      gCode += `G1 F${xyFeed} X${x0} Y${y0}; linear x/y movement\\n`\n    }\n\n    // check for endCondition\n    if (z <= -zMovement)\n      break\n    if (direction === 'both') {\n      forwardDir = !forwardDir\n    } else {\n      gCode += `G0 Z${z0 + zSafe}; move to z-safe height\\n`\n      gCode += `G0 X${x0} Y${y0}; return to start position\\n`\n    }\n  }\n\n  // move tool back to save z\n  gCode += '\\n'\n  gCode += '; End of linear pockt / cut loop\\n'\n  gCode += '; retracting back to z-safe\\n'\n  gCode += `G0 Z${z0 + zSafe}\\n`\n  gCode += '\\n'\n  gCode += 'M5 S0; Spindle Off\\n'\n  gCode += '; Job completed\\n'\n\n  // replace code in G-Code editor\n  editor.session.setValue(gCode);\n\n  // refresh 3D view\n  parseGcodeInWebWorker(editor.getValue())\n\n  // required for testing\n  return gCode;\n}\n\nconst values = loadValues()\nfunction genInputHtml(label, id, value, icon, descr) {\n  var html = ''\n  html += '<div class=\"row mb-0\">\\n'\n  html += `  <label class= \"cell-sm-6\" > ${label}</label >\\n`\n  html += '  <div class=\"cell-sm-6\">\\n'\n  html += `    <input id=\"${id}\" type=\"number\" value=\"${value}\" data-role=\"input\" data-append=\"mm\" data-prepend=\"<i class='fas ${icon}'></i>\" data-clear-button=\"false\">\\n`\n  html += '  </div>\\n'\n  html += '</div>\\n'\n  html += '<hr>\\n'\n  if (descr)\n    html += `<small > ${descr}</small > `\n  return html\n}\n\nfunction genSelectHtml(label, id, options, selected, descr = '', opt = '') {\n  const descrHtml = descr ? ` <small><i>(${descr})</i></small>` : \"\"\n  var html = ''\n  html += '<div class=\"row mb-1\">\\n'\n  html += `  <label class=\"cell-sm-8\">${label}${descrHtml}</label>\\n`\n  html += '  <div class=\"cell-sm-4\">\\n'\n  html += `    <select id=\"${id}\" data-role=\"select\" ${opt}>\\n`\n  html += options.map(o => `      <option value=\"${o}\"${o == selected ? ' selected=\"selected\"' : ''}>${o}</option>\\n`).join('')\n  html += '    </select>\\n'\n  html += '  </div>\\n'\n  html += '</div>\\n'\n  return html\n}\n\n// Dialog creation\nMetro.dialog.create({\n  title: 'Linear Pocket / Cut',\n  content:\n    genInputHtml('X movement', 'xMovement', values.xMovement, 'fa-ruler-horizontal', '') +\n    genInputHtml('Y movement', 'yMovement', values.yMovement, 'fa-ruler-vertical', '') +\n    genInputHtml('Cutting deepth', 'zMovement', values.zMovement, 'fa-ruler', '') +\n    genInputHtml('Step-down', 'stepDown', values.stepDown, 'fa-align-justify', '') +\n    genSelectHtml('Cut direction', 'direction', ['single', 'both'], values.direction, '') + \n    genInputHtml('Feedrate', 'feedrate', values.feedrate, 'fa-running', 'How fast to move the endmill in milling operation'),\n  actions: [\n    {\n      caption: \"Generate G-Code\",\n      cls: \"js-dialog-close success\",\n      onclick: function () {\n        const xMovement = parseFloat($(\"#xMovement\").val())\n        const yMovement = parseFloat($(\"#yMovement\").val())\n        const zMovement = parseFloat($(\"#zMovement\").val())\n        const stepDown = parseFloat($(\"#stepDown\").val())\n        const direction = $(\"#direction\").val()\n        const feedrate = parseInt($(\"#feedrate\").val())\n        generateGCode(xMovement, yMovement, zMovement, stepDown, direction, feedrate)\n      }\n    }, {\n      caption: \"Cancel\",\n      cls: \"js-dialog-close alert\",\n      onclick: function () {\n      }\n    }\n  ]\n});\n\n// required for jest test \nif (process.env.JEST_WORKER_ID !== undefined)\n  module.exports = generateGCode;",
  "class": "",
  "tooltip": "",
  "macrokeyboardshortcut": "",
  "jsrunonstartup": false
}